// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AdminFeeUpdated extends ethereum.Event {
  get params(): AdminFeeUpdated__Params {
    return new AdminFeeUpdated__Params(this);
  }
}

export class AdminFeeUpdated__Params {
  _event: AdminFeeUpdated;

  constructor(event: AdminFeeUpdated) {
    this._event = event;
  }

  get newAdminFee(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class LoanLiquidated extends ethereum.Event {
  get params(): LoanLiquidated__Params {
    return new LoanLiquidated__Params(this);
  }
}

export class LoanLiquidated__Params {
  _event: LoanLiquidated;

  constructor(event: LoanLiquidated) {
    this._event = event;
  }

  get loanId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get borrower(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get lender(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get loanPrincipalAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get nftCollateralId(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get loanMaturityDate(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get loanLiquidationDate(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get nftCollateralContract(): Address {
    return this._event.parameters[7].value.toAddress();
  }
}

export class LoanRepaid extends ethereum.Event {
  get params(): LoanRepaid__Params {
    return new LoanRepaid__Params(this);
  }
}

export class LoanRepaid__Params {
  _event: LoanRepaid;

  constructor(event: LoanRepaid) {
    this._event = event;
  }

  get loanId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get borrower(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get lender(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get loanPrincipalAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get nftCollateralId(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get amountPaidToLender(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get adminFee(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get nftCollateralContract(): Address {
    return this._event.parameters[7].value.toAddress();
  }

  get loanERC20Denomination(): Address {
    return this._event.parameters[8].value.toAddress();
  }
}

export class LoanStarted extends ethereum.Event {
  get params(): LoanStarted__Params {
    return new LoanStarted__Params(this);
  }
}

export class LoanStarted__Params {
  _event: LoanStarted;

  constructor(event: LoanStarted) {
    this._event = event;
  }

  get loanId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get borrower(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get lender(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get loanPrincipalAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get maximumRepaymentAmount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get nftCollateralId(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get loanStartTime(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get loanDuration(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get loanInterestRateForDurationInBasisPoints(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }

  get nftCollateralContract(): Address {
    return this._event.parameters[9].value.toAddress();
  }

  get loanERC20Denomination(): Address {
    return this._event.parameters[10].value.toAddress();
  }

  get interestIsProRated(): boolean {
    return this._event.parameters[11].value.toBoolean();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class PauserAdded extends ethereum.Event {
  get params(): PauserAdded__Params {
    return new PauserAdded__Params(this);
  }
}

export class PauserAdded__Params {
  _event: PauserAdded;

  constructor(event: PauserAdded) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class PauserRemoved extends ethereum.Event {
  get params(): PauserRemoved__Params {
    return new PauserRemoved__Params(this);
  }
}

export class PauserRemoved__Params {
  _event: PauserRemoved;

  constructor(event: PauserRemoved) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Contract__loanIdToLoanResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;
  value8: Address;
  value9: Address;
  value10: Address;
  value11: boolean;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt,
    value8: Address,
    value9: Address,
    value10: Address,
    value11: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
    this.value10 = value10;
    this.value11 = value11;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromAddress(this.value8));
    map.set("value9", ethereum.Value.fromAddress(this.value9));
    map.set("value10", ethereum.Value.fromAddress(this.value10));
    map.set("value11", ethereum.Value.fromBoolean(this.value11));
    return map;
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  adminFeeInBasisPoints(): BigInt {
    let result = super.call(
      "adminFeeInBasisPoints",
      "adminFeeInBasisPoints():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_adminFeeInBasisPoints(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "adminFeeInBasisPoints",
      "adminFeeInBasisPoints():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  erc20CurrencyIsWhitelisted(param0: Address): boolean {
    let result = super.call(
      "erc20CurrencyIsWhitelisted",
      "erc20CurrencyIsWhitelisted(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_erc20CurrencyIsWhitelisted(
    param0: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "erc20CurrencyIsWhitelisted",
      "erc20CurrencyIsWhitelisted(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getChainID(): BigInt {
    let result = super.call("getChainID", "getChainID():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getChainID(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getChainID", "getChainID():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPayoffAmount(_loanId: BigInt): BigInt {
    let result = super.call(
      "getPayoffAmount",
      "getPayoffAmount(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_loanId)]
    );

    return result[0].toBigInt();
  }

  try_getPayoffAmount(_loanId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPayoffAmount",
      "getPayoffAmount(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_loanId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getWhetherNonceHasBeenUsedForUser(_user: Address, _nonce: BigInt): boolean {
    let result = super.call(
      "getWhetherNonceHasBeenUsedForUser",
      "getWhetherNonceHasBeenUsedForUser(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromUnsignedBigInt(_nonce)
      ]
    );

    return result[0].toBoolean();
  }

  try_getWhetherNonceHasBeenUsedForUser(
    _user: Address,
    _nonce: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "getWhetherNonceHasBeenUsedForUser",
      "getWhetherNonceHasBeenUsedForUser(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromUnsignedBigInt(_nonce)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isOwner(): boolean {
    let result = super.call("isOwner", "isOwner():(bool)", []);

    return result[0].toBoolean();
  }

  try_isOwner(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isOwner", "isOwner():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isPauser(account: Address): boolean {
    let result = super.call("isPauser", "isPauser(address):(bool)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_isPauser(account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isPauser", "isPauser(address):(bool)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isValidBorrowerSignature(
    _nftCollateralId: BigInt,
    _borrowerNonce: BigInt,
    _nftCollateralContract: Address,
    _borrower: Address,
    _borrowerSignature: Bytes
  ): boolean {
    let result = super.call(
      "isValidBorrowerSignature",
      "isValidBorrowerSignature(uint256,uint256,address,address,bytes):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_nftCollateralId),
        ethereum.Value.fromUnsignedBigInt(_borrowerNonce),
        ethereum.Value.fromAddress(_nftCollateralContract),
        ethereum.Value.fromAddress(_borrower),
        ethereum.Value.fromBytes(_borrowerSignature)
      ]
    );

    return result[0].toBoolean();
  }

  try_isValidBorrowerSignature(
    _nftCollateralId: BigInt,
    _borrowerNonce: BigInt,
    _nftCollateralContract: Address,
    _borrower: Address,
    _borrowerSignature: Bytes
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isValidBorrowerSignature",
      "isValidBorrowerSignature(uint256,uint256,address,address,bytes):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_nftCollateralId),
        ethereum.Value.fromUnsignedBigInt(_borrowerNonce),
        ethereum.Value.fromAddress(_nftCollateralContract),
        ethereum.Value.fromAddress(_borrower),
        ethereum.Value.fromBytes(_borrowerSignature)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isValidLenderSignature(
    _loanPrincipalAmount: BigInt,
    _maximumRepaymentAmount: BigInt,
    _nftCollateralId: BigInt,
    _loanDuration: BigInt,
    _loanInterestRateForDurationInBasisPoints: BigInt,
    _adminFeeInBasisPoints: BigInt,
    _lenderNonce: BigInt,
    _nftCollateralContract: Address,
    _loanERC20Denomination: Address,
    _lender: Address,
    _interestIsProRated: boolean,
    _lenderSignature: Bytes
  ): boolean {
    let result = super.call(
      "isValidLenderSignature",
      "isValidLenderSignature(uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,address,address,bool,bytes):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_loanPrincipalAmount),
        ethereum.Value.fromUnsignedBigInt(_maximumRepaymentAmount),
        ethereum.Value.fromUnsignedBigInt(_nftCollateralId),
        ethereum.Value.fromUnsignedBigInt(_loanDuration),
        ethereum.Value.fromUnsignedBigInt(
          _loanInterestRateForDurationInBasisPoints
        ),
        ethereum.Value.fromUnsignedBigInt(_adminFeeInBasisPoints),
        ethereum.Value.fromUnsignedBigInt(_lenderNonce),
        ethereum.Value.fromAddress(_nftCollateralContract),
        ethereum.Value.fromAddress(_loanERC20Denomination),
        ethereum.Value.fromAddress(_lender),
        ethereum.Value.fromBoolean(_interestIsProRated),
        ethereum.Value.fromBytes(_lenderSignature)
      ]
    );

    return result[0].toBoolean();
  }

  try_isValidLenderSignature(
    _loanPrincipalAmount: BigInt,
    _maximumRepaymentAmount: BigInt,
    _nftCollateralId: BigInt,
    _loanDuration: BigInt,
    _loanInterestRateForDurationInBasisPoints: BigInt,
    _adminFeeInBasisPoints: BigInt,
    _lenderNonce: BigInt,
    _nftCollateralContract: Address,
    _loanERC20Denomination: Address,
    _lender: Address,
    _interestIsProRated: boolean,
    _lenderSignature: Bytes
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isValidLenderSignature",
      "isValidLenderSignature(uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,address,address,bool,bytes):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_loanPrincipalAmount),
        ethereum.Value.fromUnsignedBigInt(_maximumRepaymentAmount),
        ethereum.Value.fromUnsignedBigInt(_nftCollateralId),
        ethereum.Value.fromUnsignedBigInt(_loanDuration),
        ethereum.Value.fromUnsignedBigInt(
          _loanInterestRateForDurationInBasisPoints
        ),
        ethereum.Value.fromUnsignedBigInt(_adminFeeInBasisPoints),
        ethereum.Value.fromUnsignedBigInt(_lenderNonce),
        ethereum.Value.fromAddress(_nftCollateralContract),
        ethereum.Value.fromAddress(_loanERC20Denomination),
        ethereum.Value.fromAddress(_lender),
        ethereum.Value.fromBoolean(_interestIsProRated),
        ethereum.Value.fromBytes(_lenderSignature)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  loanIdToLoan(param0: BigInt): Contract__loanIdToLoanResult {
    let result = super.call(
      "loanIdToLoan",
      "loanIdToLoan(uint256):(uint256,uint256,uint256,uint256,uint64,uint32,uint32,uint32,address,address,address,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Contract__loanIdToLoanResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toAddress(),
      result[9].toAddress(),
      result[10].toAddress(),
      result[11].toBoolean()
    );
  }

  try_loanIdToLoan(
    param0: BigInt
  ): ethereum.CallResult<Contract__loanIdToLoanResult> {
    let result = super.tryCall(
      "loanIdToLoan",
      "loanIdToLoan(uint256):(uint256,uint256,uint256,uint256,uint64,uint32,uint32,uint32,address,address,address,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__loanIdToLoanResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toAddress(),
        value[9].toAddress(),
        value[10].toAddress(),
        value[11].toBoolean()
      )
    );
  }

  loanRepaidOrLiquidated(param0: BigInt): boolean {
    let result = super.call(
      "loanRepaidOrLiquidated",
      "loanRepaidOrLiquidated(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBoolean();
  }

  try_loanRepaidOrLiquidated(param0: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "loanRepaidOrLiquidated",
      "loanRepaidOrLiquidated(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  maximumLoanDuration(): BigInt {
    let result = super.call(
      "maximumLoanDuration",
      "maximumLoanDuration():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_maximumLoanDuration(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maximumLoanDuration",
      "maximumLoanDuration():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maximumNumberOfActiveLoans(): BigInt {
    let result = super.call(
      "maximumNumberOfActiveLoans",
      "maximumNumberOfActiveLoans():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_maximumNumberOfActiveLoans(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maximumNumberOfActiveLoans",
      "maximumNumberOfActiveLoans():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nftContractIsWhitelisted(param0: Address): boolean {
    let result = super.call(
      "nftContractIsWhitelisted",
      "nftContractIsWhitelisted(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_nftContractIsWhitelisted(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "nftContractIsWhitelisted",
      "nftContractIsWhitelisted(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalActiveLoans(): BigInt {
    let result = super.call(
      "totalActiveLoans",
      "totalActiveLoans():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalActiveLoans(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalActiveLoans",
      "totalActiveLoans():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalNumLoans(): BigInt {
    let result = super.call("totalNumLoans", "totalNumLoans():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalNumLoans(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalNumLoans",
      "totalNumLoans():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class AddPauserCall extends ethereum.Call {
  get inputs(): AddPauserCall__Inputs {
    return new AddPauserCall__Inputs(this);
  }

  get outputs(): AddPauserCall__Outputs {
    return new AddPauserCall__Outputs(this);
  }
}

export class AddPauserCall__Inputs {
  _call: AddPauserCall;

  constructor(call: AddPauserCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddPauserCall__Outputs {
  _call: AddPauserCall;

  constructor(call: AddPauserCall) {
    this._call = call;
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class BeginLoanCall extends ethereum.Call {
  get inputs(): BeginLoanCall__Inputs {
    return new BeginLoanCall__Inputs(this);
  }

  get outputs(): BeginLoanCall__Outputs {
    return new BeginLoanCall__Outputs(this);
  }
}

export class BeginLoanCall__Inputs {
  _call: BeginLoanCall;

  constructor(call: BeginLoanCall) {
    this._call = call;
  }

  get _loanPrincipalAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _maximumRepaymentAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _nftCollateralId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _loanDuration(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _loanInterestRateForDurationInBasisPoints(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _adminFeeInBasisPoints(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _borrowerAndLenderNonces(): Array<BigInt> {
    return this._call.inputValues[6].value.toBigIntArray();
  }

  get _nftCollateralContract(): Address {
    return this._call.inputValues[7].value.toAddress();
  }

  get _loanERC20Denomination(): Address {
    return this._call.inputValues[8].value.toAddress();
  }

  get _lender(): Address {
    return this._call.inputValues[9].value.toAddress();
  }

  get _borrowerSignature(): Bytes {
    return this._call.inputValues[10].value.toBytes();
  }

  get _lenderSignature(): Bytes {
    return this._call.inputValues[11].value.toBytes();
  }
}

export class BeginLoanCall__Outputs {
  _call: BeginLoanCall;

  constructor(call: BeginLoanCall) {
    this._call = call;
  }
}

export class CancelLoanCommitmentBeforeLoanHasBegunCall extends ethereum.Call {
  get inputs(): CancelLoanCommitmentBeforeLoanHasBegunCall__Inputs {
    return new CancelLoanCommitmentBeforeLoanHasBegunCall__Inputs(this);
  }

  get outputs(): CancelLoanCommitmentBeforeLoanHasBegunCall__Outputs {
    return new CancelLoanCommitmentBeforeLoanHasBegunCall__Outputs(this);
  }
}

export class CancelLoanCommitmentBeforeLoanHasBegunCall__Inputs {
  _call: CancelLoanCommitmentBeforeLoanHasBegunCall;

  constructor(call: CancelLoanCommitmentBeforeLoanHasBegunCall) {
    this._call = call;
  }

  get _nonce(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CancelLoanCommitmentBeforeLoanHasBegunCall__Outputs {
  _call: CancelLoanCommitmentBeforeLoanHasBegunCall;

  constructor(call: CancelLoanCommitmentBeforeLoanHasBegunCall) {
    this._call = call;
  }
}

export class LiquidateOverdueLoanCall extends ethereum.Call {
  get inputs(): LiquidateOverdueLoanCall__Inputs {
    return new LiquidateOverdueLoanCall__Inputs(this);
  }

  get outputs(): LiquidateOverdueLoanCall__Outputs {
    return new LiquidateOverdueLoanCall__Outputs(this);
  }
}

export class LiquidateOverdueLoanCall__Inputs {
  _call: LiquidateOverdueLoanCall;

  constructor(call: LiquidateOverdueLoanCall) {
    this._call = call;
  }

  get _loanId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class LiquidateOverdueLoanCall__Outputs {
  _call: LiquidateOverdueLoanCall;

  constructor(call: LiquidateOverdueLoanCall) {
    this._call = call;
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PayBackLoanCall extends ethereum.Call {
  get inputs(): PayBackLoanCall__Inputs {
    return new PayBackLoanCall__Inputs(this);
  }

  get outputs(): PayBackLoanCall__Outputs {
    return new PayBackLoanCall__Outputs(this);
  }
}

export class PayBackLoanCall__Inputs {
  _call: PayBackLoanCall;

  constructor(call: PayBackLoanCall) {
    this._call = call;
  }

  get _loanId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class PayBackLoanCall__Outputs {
  _call: PayBackLoanCall;

  constructor(call: PayBackLoanCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenouncePauserCall extends ethereum.Call {
  get inputs(): RenouncePauserCall__Inputs {
    return new RenouncePauserCall__Inputs(this);
  }

  get outputs(): RenouncePauserCall__Outputs {
    return new RenouncePauserCall__Outputs(this);
  }
}

export class RenouncePauserCall__Inputs {
  _call: RenouncePauserCall;

  constructor(call: RenouncePauserCall) {
    this._call = call;
  }
}

export class RenouncePauserCall__Outputs {
  _call: RenouncePauserCall;

  constructor(call: RenouncePauserCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class UpdateAdminFeeCall extends ethereum.Call {
  get inputs(): UpdateAdminFeeCall__Inputs {
    return new UpdateAdminFeeCall__Inputs(this);
  }

  get outputs(): UpdateAdminFeeCall__Outputs {
    return new UpdateAdminFeeCall__Outputs(this);
  }
}

export class UpdateAdminFeeCall__Inputs {
  _call: UpdateAdminFeeCall;

  constructor(call: UpdateAdminFeeCall) {
    this._call = call;
  }

  get _newAdminFeeInBasisPoints(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateAdminFeeCall__Outputs {
  _call: UpdateAdminFeeCall;

  constructor(call: UpdateAdminFeeCall) {
    this._call = call;
  }
}

export class UpdateMaximumLoanDurationCall extends ethereum.Call {
  get inputs(): UpdateMaximumLoanDurationCall__Inputs {
    return new UpdateMaximumLoanDurationCall__Inputs(this);
  }

  get outputs(): UpdateMaximumLoanDurationCall__Outputs {
    return new UpdateMaximumLoanDurationCall__Outputs(this);
  }
}

export class UpdateMaximumLoanDurationCall__Inputs {
  _call: UpdateMaximumLoanDurationCall;

  constructor(call: UpdateMaximumLoanDurationCall) {
    this._call = call;
  }

  get _newMaximumLoanDuration(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateMaximumLoanDurationCall__Outputs {
  _call: UpdateMaximumLoanDurationCall;

  constructor(call: UpdateMaximumLoanDurationCall) {
    this._call = call;
  }
}

export class UpdateMaximumNumberOfActiveLoansCall extends ethereum.Call {
  get inputs(): UpdateMaximumNumberOfActiveLoansCall__Inputs {
    return new UpdateMaximumNumberOfActiveLoansCall__Inputs(this);
  }

  get outputs(): UpdateMaximumNumberOfActiveLoansCall__Outputs {
    return new UpdateMaximumNumberOfActiveLoansCall__Outputs(this);
  }
}

export class UpdateMaximumNumberOfActiveLoansCall__Inputs {
  _call: UpdateMaximumNumberOfActiveLoansCall;

  constructor(call: UpdateMaximumNumberOfActiveLoansCall) {
    this._call = call;
  }

  get _newMaximumNumberOfActiveLoans(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateMaximumNumberOfActiveLoansCall__Outputs {
  _call: UpdateMaximumNumberOfActiveLoansCall;

  constructor(call: UpdateMaximumNumberOfActiveLoansCall) {
    this._call = call;
  }
}

export class WhitelistERC20CurrencyCall extends ethereum.Call {
  get inputs(): WhitelistERC20CurrencyCall__Inputs {
    return new WhitelistERC20CurrencyCall__Inputs(this);
  }

  get outputs(): WhitelistERC20CurrencyCall__Outputs {
    return new WhitelistERC20CurrencyCall__Outputs(this);
  }
}

export class WhitelistERC20CurrencyCall__Inputs {
  _call: WhitelistERC20CurrencyCall;

  constructor(call: WhitelistERC20CurrencyCall) {
    this._call = call;
  }

  get _erc20Currency(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _setAsWhitelisted(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class WhitelistERC20CurrencyCall__Outputs {
  _call: WhitelistERC20CurrencyCall;

  constructor(call: WhitelistERC20CurrencyCall) {
    this._call = call;
  }
}

export class WhitelistNFTContractCall extends ethereum.Call {
  get inputs(): WhitelistNFTContractCall__Inputs {
    return new WhitelistNFTContractCall__Inputs(this);
  }

  get outputs(): WhitelistNFTContractCall__Outputs {
    return new WhitelistNFTContractCall__Outputs(this);
  }
}

export class WhitelistNFTContractCall__Inputs {
  _call: WhitelistNFTContractCall;

  constructor(call: WhitelistNFTContractCall) {
    this._call = call;
  }

  get _nftContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _setAsWhitelisted(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class WhitelistNFTContractCall__Outputs {
  _call: WhitelistNFTContractCall;

  constructor(call: WhitelistNFTContractCall) {
    this._call = call;
  }
}
